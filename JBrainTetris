package tetris;

import java.awt.*;

import javax.swing.*;

import java.util.*;

public class JBrainTetris extends JTetris {

	private static DefaultBrain brain;
	private static JCheckBox brainMode;
	private static Brain.Move best;
	private static JSlider adversary;
	private static JPanel adverPanel;
	private static Piece piece;
	private static JLabel adversaryOn;
	
	public JBrainTetris(int pixels) {
		super(pixels);
		brain = new DefaultBrain();
	}

	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception ignored) { }
		
		JTetris tetris = new JBrainTetris(16);
		JFrame frame = JTetris.createFrame(tetris);
		frame.setVisible(true);
	}
	
	@Override
	public JComponent createControlPanel() {
		JComponent panel = super.createControlPanel();
		
		panel.add(new JLabel("Brain:")); 
		brainMode = new JCheckBox("Brain active"); 
		panel.add(brainMode);
		
		 //"adverPanel" panel with a JSlider on it to put on the overall panel
		adverPanel = new JPanel(); 
		adverPanel.add(new JLabel("Adversary:")); 
		
		adversaryOn = new JLabel("ok"); //created separately to allow for changing of text
		adverPanel.add(adversaryOn);
		
		adversary = new JSlider(0, 100, 0); // min, max, current 
		adversary.setPreferredSize(new Dimension(100,15)); 
		adverPanel.add(adversary); 
		// add "adverPanel" to panel of controls 
		panel.add(adverPanel);
		
		return panel;
	}
	
	@Override
	public void tick(int verb){
		super.tick(verb); //default setting is to allow the superclass to control gameplay
		//if the brain is on and the piece isn't already as it should be, fix its location gradually
		if(brainMode.isSelected() && best != null && super.newY!=0){
			if(!super.newPiece.equals(best.piece)){
				super.tick(ROTATE);
			}
			if(super.newX > best.x){
				super.tick(LEFT);
			}
			if(super.newX < best.x){
				super.tick(RIGHT);
			}
		}
	}
		
	@Override
	public void addNewPiece(){
		super.addNewPiece();
		//undo() because of commit() problem
		board.undo();
		//stores the best move the brain generates for a given piece
		best = brain.bestMove(board, currentPiece, 20, null);
	}
	
	@Override
	public Piece pickNextPiece(){
		Random rgen = new Random();
		int adversePercent = rgen.nextInt(100);
		Piece worstPiece = new Piece(Piece.PYRAMID_STR); //default to pyr1 just for kicks
		Brain.Move worst = new Brain.Move();
		
		//if the adversary is not selected, have the superclass control it
		if(adversary.getValue()==0){
			piece = super.pickNextPiece();
			adversaryOn.setText("ok"); //lowercase denotes random (traditional) piece selection
		}
	
		//if the adversary is to be used (selected by force or chance)
		else if(adversary.getValue()==100 || adversePercent>=adversary.getValue()){
			adversaryOn.setText("OK"); //uppercase denotes adversary piece selection
			//considers all the potential pieces and orientations
			for(Piece piece: Piece.getPieces()){
				Brain.Move rating = brain.bestMove(board, piece, 20, null);
				if(rating.score > worst.score){
					worstPiece = piece;
					worst = rating;
				}
			} piece = worstPiece;
		}
		return piece;
	}
}
